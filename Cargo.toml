
[package]
name = "inlottie"
version = "0.1.9"
edition = "2021"
default-run = "inlottie"
license = "MIT OR Apache-2.0"
authors = [ "MeiHui FAN <mhfan@ustc.edu>" ]
repository  = "https://github.com/mhfan/inlottie"   # https://crates.io/category_slugs
categories  = [ "parser-implementations", "rendering", "graphics", "multimedia::images" ]
description = "lib/tool in Rust to load/parse/render lottie animation files"
keywords = [ "Lottie", "Rive", "Animation", "vector-graphic" ]
#exclude  = [ "examples" ]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
lottie  = []
default = [ "lottie" ] #, "vello", "rive-rs", "b2d"
b2d = [ "intvg", "softbuffer" ]
vello = [ "dep:vello", "image", "anyhow", "pollster" ]  # "wgpu",
#glutin = [ "dep:glutin", "glutin-winit", "raw-window-handle" ]
expression = []

[[bin]]
name = "vello"
path = "src/winit_vello.rs"
required-features = [ "vello" ]

[dependencies]
serde = { version = "1.0", features = [ "derive" ] }
serde_json = "1.0"
serde_repr = "0.1"

#flo_curves = "0.7"
kurbo = "0.11"
usvg  = "0.44"

softbuffer = { version = "0.4", optional = true }
intvg = { version = "0.1", optional = true, features = [ "b2d" ], git = "https://github.com/mhfan/intvg" }

vello = { version = "0.3", optional = true }    # git = "https://github.com/linebender/vello",
pollster = { version = "0.3", optional = true }
anyhow = { version = "1.0", optional = true }
image = { version = "0.25", optional = true } #features = [ "png", "jpeg", "gif" ]
#wgpu  = { version = "0.20", optional = true }

winit = "0.30"
femtovg = { version = "0.9", features = [ "image-loading" ]}

rive-rs = { optional = true, git = "https://github.com/rive-app/rive-rs" }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
glutin = "0.32"	    # offscreen@v0.29?
glutin-winit = "0.5"
raw-window-handle = "0.6"

[target.'cfg(target_arch = "wasm32")'.dependencies]
web_sys = { version = "0.3", package = "web-sys", features = [
    "console", "WebGlContextAttributes",
] }

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage_nightly)'] }

[dev-dependencies]
serde_path_to_error = "0.1"
serde_test = "1.0"
glob = "0.3"

[build-dependencies]
chrono = "0.4"

[profile.dev]
#incremental = false
opt-level = 2   # Enable a small amount of optimization in debug mode

[profile.dev.package."*"]
opt-level = 3   # Enable high optimizations for dependencies, but not for own code.

[profile.release]
codegen-units = 1
strip = 'debuginfo'
panic = 'abort'
#opt-level = 3   # default level
lto = 'fat' # true

[workspace]

